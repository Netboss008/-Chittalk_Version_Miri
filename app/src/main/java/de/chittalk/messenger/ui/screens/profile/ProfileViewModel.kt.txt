package de.chittalk.messenger.ui.screens.profile

import androidx.lifecycle.ViewModel
import androidx.lifecycle.viewModelScope
import dagger.hilt.android.lifecycle.HiltViewModel
import kotlinx.coroutines.flow.*
import kotlinx.coroutines.launch
import javax.inject.Inject

@HiltViewModel
class ProfileViewModel @Inject constructor(
    private val authRepository: AuthRepository,
    private val profileRepository: ProfileRepository
) : ViewModel() {

    private val _uiState = MutableStateFlow(ProfileUiState())
    val uiState: StateFlow<ProfileUiState> = _uiState.asStateFlow()

    init {
        loadProfile()
        loadRecentActivity()
    }

    private fun loadProfile() {
        viewModelScope.launch {
            try {
                val profile = profileRepository.getUserProfile()
                val stats = profileRepository.getUserStats()
                _uiState.value = _uiState.value.copy(
                    profile = profile,
                    stats = stats,
                    isLoading = false
                )
            } catch (e: Exception) {
                _uiState.value = _uiState.value.copy(
                    error = e.message,
                    isLoading = false
                )
            }
        }
    }

    private fun loadRecentActivity() {
        viewModelScope.launch {
            profileRepository.getRecentActivity()
                .catch { e ->
                    _uiState.value = _uiState.value.copy(error = e.message)
                }
                .collect { activities ->
                    _uiState.value = _uiState.value.copy(recentActivity = activities)
                }
        }
    }

    fun startEditingProfile() {
        _uiState.value = _uiState.value.copy(isEditing = true)
    }

    fun updateProfile(newUsername: String, newBio: String?) {
        viewModelScope.launch {
            try {
                val updatedProfile = profileRepository.updateProfile(newUsername, newBio)
                _uiState.value = _uiState.value.copy(
                    profile = updatedProfile,
                    isEditing = false
                )
            } catch (e: Exception) {
                _uiState.value = _uiState.value.copy(error = e.message)
            }
        }
    }

    fun logout() {
        viewModelScope.launch {
            authRepository.logout()
        }
    }
}

data class ProfileUiState(
    val profile: UserProfile = UserProfile(),
    val stats: UserStats = UserStats(),
    val recentActivity: List<UserActivity> = emptyList(),
    val isLoading: Boolean = true,
    val isEditing: Boolean = false,
    val error: String? = null
)

data class UserProfile(
    val username: String = "",
    val imageUrl: String? = null,
    val bio: String? = null
)

data class UserStats(
    val followers: Int = 0,
    val following: Int = 0,
    val totalStreams: Int = 0
)

data class UserActivity(
    val type: ActivityType,
    val description: String,
    val timeAgo: String
)

enum class ActivityType {
    STREAM,
    CHAT,
    FOLLOW
}